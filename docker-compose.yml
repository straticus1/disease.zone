version: '3.8'

services:
  # Main Disease Zone API & Web Server
  disease-zone-app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL:-sqlite:./database.sqlite}
      - SESSION_SECRET=${SESSION_SECRET:-your-secret-key-change-in-production}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-in-production}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - BLOCKCHAIN_API_URL=http://blockchain-api:4000
      - MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    volumes:
      - ./data:/app/data
      - ./public:/app/public:ro
    depends_on:
      - redis
      - postgres
    networks:
      - disease-zone-network
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-disease_zone}
      - POSTGRES_USER=${POSTGRES_USER:-diseaseZone}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - disease-zone-network
    restart: unless-stopped

  # Redis for Sessions and Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - disease-zone-network
      - blockchain-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy for Production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - disease-zone-app
    networks:
      - disease-zone-network
    restart: unless-stopped

  # Blockchain API Server (from ledger subdirectory)
  blockchain-api:
    build:
      context: ./ledger
      dockerfile: docker/Dockerfile.api
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - MAIN_API_URL=http://disease-zone-app:3000
      - FABRIC_NETWORK_PATH=/app/hyperledger/network
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ./ledger/hyperledger:/app/hyperledger
      - ./ledger/smart-contracts:/app/smart-contracts
      - blockchain-data:/app/data
    depends_on:
      - redis
      - kafka
    networks:
      - disease-zone-network
      - blockchain-network
    restart: unless-stopped

  # Kafka for blockchain events
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - blockchain-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - blockchain-network
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - disease-zone-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - disease-zone-network
    restart: unless-stopped

networks:
  disease-zone-network:
    driver: bridge
  blockchain-network:
    external: true
    name: ledger_blockchain-network

volumes:
  postgres-data:
  redis-data:
  blockchain-data:
  kafka-data:
  prometheus-data:
  grafana-data:
---
- name: Deploy application updates to ECS
  hosts: aws
  gather_facts: false

  tasks:
    - name: Build and push updated Docker image
      block:
        - name: Build Docker image
          shell: |
            cd {{ docker_build_path }}
            docker build -t {{ project_name }}:{{ docker_image_tag }} .
          register: docker_build
          changed_when: true

        - name: Get ECR login token
          shell: >
            aws ecr get-login-password --region {{ aws_region }} |
            docker login --username AWS --password-stdin {{ ecr_repository_url }}
          register: ecr_login
          changed_when: false

        - name: Tag Docker image for ECR
          shell: |
            docker tag {{ project_name }}:{{ docker_image_tag }} {{ ecr_repository_url }}:{{ docker_image_tag }}
          register: docker_tag
          changed_when: true

        - name: Push Docker image to ECR
          shell: |
            docker push {{ ecr_repository_url }}:{{ docker_image_tag }}
          register: docker_push
          changed_when: true

    - name: Deploy to ECS
      ecs_service:
        state: present
        name: "{{ ecs_service_name }}"
        cluster: "{{ ecs_cluster_name }}"
        region: "{{ aws_region }}"
        force_new_deployment: true
        wait: true

    - name: Wait for primary domain deployment to complete
      uri:
        url: "https://{{ domain_name }}/api/health"
        method: GET
        status_code: 200
      register: health_check_primary
      until: health_check_primary.status == 200
      retries: 10
      delay: 30

    - name: Wait for secondary domain deployment to complete
      uri:
        url: "https://{{ secondary_domain | default('disease.app') }}/api/health"
        method: GET
        status_code: 200
      register: health_check_secondary
      until: health_check_secondary.status == 200
      retries: 10
      delay: 30
      when: secondary_domain is defined

    - name: Test all subdomains for primary domain
      uri:
        url: "https://{{ item }}.{{ domain_name }}/api/health"
        method: GET
        status_code: 200
      loop:
        - www
        - api
        - ledger
      register: subdomain_health_primary
      retries: 5
      delay: 10
      ignore_errors: true

    - name: Test all subdomains for secondary domain
      uri:
        url: "https://{{ item }}.{{ secondary_domain | default('disease.app') }}/api/health"
        method: GET
        status_code: 200
      loop:
        - www
        - api
        - ledger
      register: subdomain_health_secondary
      retries: 5
      delay: 10
      ignore_errors: true
      when: secondary_domain is defined

    - name: Display comprehensive deployment status
      debug:
        msg: |
          🎉 DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉
          
          ✅ Primary Domain ({{ domain_name }}):
          - Root: https://{{ domain_name }} ✅
          - WWW: https://www.{{ domain_name }} {{ '✅' if subdomain_health_primary.results[0].status == 200 else '❌' }}
          - API: https://api.{{ domain_name }} {{ '✅' if subdomain_health_primary.results[1].status == 200 else '❌' }}
          - Ledger: https://ledger.{{ domain_name }} {{ '✅' if subdomain_health_primary.results[2].status == 200 else '❌' }}
          
          {% if secondary_domain is defined %}
          ✅ Secondary Domain ({{ secondary_domain | default('disease.app') }}):
          - Root: https://{{ secondary_domain | default('disease.app') }} ✅
          - WWW: https://www.{{ secondary_domain | default('disease.app') }} {{ '✅' if subdomain_health_secondary.results[0].status == 200 else '❌' }}
          - API: https://api.{{ secondary_domain | default('disease.app') }} {{ '✅' if subdomain_health_secondary.results[1].status == 200 else '❌' }}
          - Ledger: https://ledger.{{ secondary_domain | default('disease.app') }} {{ '✅' if subdomain_health_secondary.results[2].status == 200 else '❌' }}
          {% endif %}
          
          🌐 All domains and subdomains are serving traffic!
